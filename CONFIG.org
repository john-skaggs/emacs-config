#+Title: My Emacs Config
#+Author: John Skaggs

* Things you might not want/expect 
  I will start with things you might not expect which are idiosyncratic to
  my particular taste how to go about configuring emacs.  YMMV.  If you do
  not like *Vim* or are not inclined to configure emacs using org-mode then
  go ahead and skip this part.  If that is the case then your mileage will
  certainly vary.
** Org-mode
*** Path Variable
    #+BEGIN_SRC emacs-lisp
    ;;; Org-Mode
    (add-to-list 'load-path "/home/skaggbag/.emacs.d/lisp/org-mode/lisp")
    (add-to-list 'load-path "/home/skaggbag/.emacs.d/lisp/org-mode/contrib/lisp" t)
  #+END_SRC
*** Basic Config
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets						
		 :ensure t							
		 :config							
		 (progn
                  (global-set-key (kbd "C-c l") 'org-store-link)
                  (global-set-key (kbd "C-c a") 'org-agenda)
                  (global-set-key (kbd "C-c c") 'org-capture)
		  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))

      ;; set up babel support
      (require 'org-install)
      ;(org-eukleides-path "/usr/")
      ;(require 'ob-eukleides)
      ;; add additional languages with (require 'ob-language)
 #+END_SRC
** Evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
		  :ensure t)
     (evil-mode t)
 #+END_SRC
** Undo Tree
   #+begin_src emacs-lisp
   ;;; package --- Summary
   ;;; Provides =C-S-/= for redo
   ;;; =C-x u= for tree of changes
   ;;; Commentary:
   ;;; Code:
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
#+end_src
* Things you probably want/expect 
** Appearance
 #+begin_src emacs-lisp
   (set-face-attribute 'default nil :height 160)

   ;(global-display-line-numbers-mode 'relative)
   ;(global-hl-line-mode t)
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1))
#+end_src
*** Which-key
    Upon typing =C-x=, =C-c=, etc.. =which-key= causes a minibuffer to appear 
    which displays keys and the functions bound to them that can complete or
    extend the chord.
 #+begin_src emacs-lisp
   (use-package which-key
		:ensure t
		:config (which-key-mode))

   (show-paren-mode 1)

 #+end_src
** Search
   Swiper augments the normal =C-s= search with reg-expressions and wildcards.
   With Swiper enabled we can navigate actually through buffers using the
   enhanced search functionality Swiper provides us.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	       :ensure t
	       :config
	       (progn
		 ;; The following is from swiper docs as recommended
		 (ivy-mode 1)
		 (setq ivy-use-virtual-buffers t)
		 (setq enable-recursive-minibuffers t)
		 (setq ivy-use-selectable-prompt t)
		 ;; enable this if you want `swiper' to use it
		 ;; (setq search-default-mode #'char-fold-to-regexp)
		 (global-set-key "\C-s" 'swiper)
		 (global-set-key (kbd "C-c C-r") 'ivy-resume)
		 (global-set-key (kbd "<f6>") 'ivy-resume)
		 (global-set-key (kbd "M-x") 'counsel-M-x)
		 (global-set-key (kbd "<f1> f") 'counsel-describe-function)
		 (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
		 (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
		 (global-set-key (kbd "<f1> l") 'counsel-find-library)
		 (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
		 (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
		 (global-set-key (kbd "C-c g") 'counsel-git)
		 (global-set-key (kbd "C-c j") 'counsel-git-grep)
		 (global-set-key (kbd "C-c k") 'counsel-ag)
		 (global-set-key (kbd "C-x l") 'counsel-locate)
		 (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
		 (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
	       ))
#+END_SRC 
** Syntax highlighting
*** Flycheck
  #+BEGIN_SRC emacs-lisp
  ;;; Provides syntax highlighting on a variety of languages
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  ;;; flycheck ends here
#+end_src
** Auto-Completion
   There are two competing major-modes that provide auto-completion within Emacs.
   The first package is called auto-complete, and as one might guess based on
   the name it came first. The other major-mode providing auto-completion is called
   Company-mode.  Both seem to work fine.  The major trade-offs are essentially...


*** Company-mode
    #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :init
     :config
     (global-company-mode t))
   ;  (global-set-key "" 'global-company-mode)
  
   (use-package company-math
     :ensure t
     :init
     :config
     (add-to-list 'company-backends 'company-math-symbols-unicode)
     (add-hook 'TeX-mode-hook 'my-latex-mode-setup))
 #+END_SRC
*** auto-complete  
    For 
    #+BEGIN_SRC emacs-lisp

     ;;; auto-complete
     ;(use-package auto-complete
     ;	     :ensure t
     ;	     :init
     ;	     (progn
     ;	     (ac-config-default)
     ;	     (global-auto-complete-mode t)
					 
    #+END_SRC
** Tweaks
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (auto-fill-mode t)
     (follow-mode t)
     (icomplete-mode t)
     (fset 'yes-or-no-p 'y-or-n-p)
     ;;; Displays possible buffers in echo-area
     ;;; Presents
     (setq indo-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     ;;;
     ;;; This changes the buffer menu
     (defalias 'list-buffers 'ibuffer)

     (use-package ace-window
		 :ensure t
		 :init
		 (progn
		  (global-set-key (kbd "M-o") 'ace-window)
		   (custom-set-faces
		    '(aw-leading-char-face ((
			 t (:inherit ace-jump-face-foreground :height 3.0)))))
		      ;(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
		      ;(global-set-key [remap other-window] 'ace-window)
									   ))    ; of window marker

     (use-package counsel
		 :ensure t)
#+END_SRC
*** Try
    =M-x try <RET> package-name <RET>= to try a package with being forced to
    permanently install it. Not mandatory by any means but handy if you get bored
    and or curious.  I personally am a little bit to quick to make substantial
    changes so if I were to use =try= it would undoubtedly benefit me.
    #+BEGIN_SRC emacs-lisp
      (use-package try
		   :ensure t)
 #+END_SRC
*** Keybindings
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x C-f") 'set-fill-column)
      (global-set-key (kbd "C-x f") 'counsel-find-file)
      (global-set-key (kbd "<f5>") 'revert-buffer)
      (global-set-key (kbd "C-e") 'eval-last-sexp)
      (global-set-key (kbd "C-x e") 'eval-last-sexp)

      (use-package expand-region
	:ensure t
	:config
	(global-set-key (kbd "C-=") 'er/expand-region))
  #+end_src
** Languages
*** Latex
    #+begin_src emacs-lisp
      (use-package tex
	:ensure auctex)

      ;; local configuration for TeX modes
      (defun my-latex-mode-setup ()
	(setq-local company-backends
		    (append '((company-math-symbols-latex company-latex-commands))
			    company-backends)))
    #+end_src
*** J
    #+BEGIN_SRC emacs-lisp
    ;(autoload 'j-mode "j-mode.el" "Major mode for editing J files" t)
    ;(add-to-list 'auto-mode-alist '("\\.ij[rstp]$" . j-mode))
    ;;; J
    ;(add-to-list 'load-path "/home/skaggbag/src/j-mode")

  #+END_SRC
** Cheat Sheet
   #+BEGIN_SRC emacs-lisp
     (use-package cheat-sh
		 :ensure t)
 #+END_SRC
** PDF
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t)
 #+END_SRC
** Version Control 
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
#+END_SRC
